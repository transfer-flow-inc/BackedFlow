name: Build and Publish Docker image to Github Image Repo

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '18'
          distribution: adopt

      - name: Set up Maven
        uses: s4u/maven-settings-action@v2.4.0
        with:
          servers: |
            [{
              "id": "ghcr",
              "username": "${{ github.actor }}",
              "password": "${{ secrets.REGISTRY_PASSWORD }}"
            }]
      - name: Install dependencies
        run: sudo apt-get install jq


      - name: Preparing the Image build
        id: prep
        run: |
          echo "::set-output name=tag::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"

      - name: Build and push Docker image
        run: mvn compile jib:build -Djib.to.image=ghcr.io/${{ steps.prep.outputs.tag }} -Djib.to.auth.username="${{ github.actor }}" -Djib.to.auth.password="${{ secrets.REGISTRY_PASSWORD }}"

      - name: Redeploy stack on Portainer
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_ENDPOINT: ${{ secrets.PORTAINER_ENDPOINT }}
          PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
          PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
          STACK_NAME: transfer-flow-backend
        run: |
          # Authenticate with Portainer and store the JWT
          echo "Authenticating with Portainer..."
          AUTH_RESPONSE=$(curl -s -X POST "$PORTAINER_URL/api/auth" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"Username\": \"$PORTAINER_USERNAME\", \"Password\": \"$PORTAINER_PASSWORD\"}")
          echo $AUTH_RESPONSE
          JWT=$(echo $AUTH_RESPONSE | jq -r .jwt)

          # Get the stack ID
          echo "Getting the stack ID..."
          STACKS_RESPONSE=$(curl -s -H "Authorization: Bearer $JWT" "$PORTAINER_URL/api/stacks")
          echo $STACKS_RESPONSE
          STACK_ID=$(echo $STACKS_RESPONSE | jq -r ".[] | select(.Name==\"$STACK_NAME\") | .Id")
          
          # Fetch the existing compose file of the stack
          echo "Fetching the existing compose file of the stack..."
          COMPOSE_FILE_RESPONSE=$(curl -s -H "Authorization: Bearer $JWT" "$PORTAINER_URL/api/stacks/$STACK_ID/docker-compose")
          echo $COMPOSE_FILE_RESPONSE
          COMPOSE_FILE=$(echo $COMPOSE_FILE_RESPONSE | jq -r '.StackFileContent')
          
          # Redeploy the stack with the fetched compose file
          echo "Redeploying the stack with the fetched compose file..."
          REDEPLOY_RESPONSE=$(curl -s -X POST "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=$PORTAINER_ENDPOINT" \
          -H "Authorization: Bearer $JWT" \
          -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -d "{
            \"StackFileContent\": \"$COMPOSE_FILE\",
            \"Env\": [],
            \"Prune\": false,
            \"PullImage\": true
          }")
          echo $REDEPLOY_RESPONSE